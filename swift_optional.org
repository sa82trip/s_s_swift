* Optional
** initial example
:PROPERTIES:
:header-args:swift: :session swift-01
:END:
Optional residence를 가지고 있는 Person Class
#+begin_src swift :results none
  class Residence {
      var numberOfRooms = 1
  }
  class Person {
      var residence: Residence?
  }
  
#+end_src

If you create a new Person instance, its residence property is default initialized to nil, by virtue of being optional. In the code below, john has a residence property value of nil:

#+begin_src swift
let john = Person()
if let roomCount = john.residence?.numberOfRooms {
    print("John's residence has \(roomCount) room(s).")
} else {
    print("Unable to retrieve the number of rooms.")
}
// Prints "Unable to retrieve the number of rooms."
#+end_src

#+RESULTS:
: john: Person = {
:   residence = nil
: }
: Unable to retrieve the number of rooms.

위의 결과가 나오는 이유는 residence가 nil이기 때문에 그 이후로 접근을 할 수 없기때문에

#+begin_src swift
  let john1 = Person()
  var residence = Residence()
  john1.residence = residence
  //john1.residence = Residence()
  if let roomCount = john1.residence?.numberOfRooms {
      print("John's residence has \(roomCount) room(s).")
  } else {
      print("Unable to retrieve the number of rooms.")
  }
  // Prints "John's residence has 1 room(s)."
#+end_src

residence를 어사인 했기 때문에 이제는 접근 가능

#+RESULTS:
: john1: Person = {
:   residence = nil
: }
: residence: Residence = {
:   numberOfRooms = 1
: }
: John's residence has 1 room(s).

** more elaborated example
:PROPERTIES:
:header-args:swift: :session swift-02
:END:
Room Address Residence class declaration
#+begin_src swift
  class Room {
      let name: String
      init(name: String) { self.name = name }
  }
  class Address {
      var buildingName: String?
      var buildingNumber: String?
      var street: String?
      func buildingIdentifier() -> String? {
          if let buildingNumber = buildingNumber, let street = street {
              return "\(buildingNumber) \(street)"
          } else if buildingName != nil {
              return buildingName
          } else {
              return nil
          }
      }
  }
  
  class Residence{
      var rooms: [Room] = []
      var numberOfRooms: Int {
          return rooms.count
      }
      subscript(i: Int) -> Room {
          get {
              return rooms[i]
          }
          set {
              rooms[i] = newValue
          }
      }
      func printNumberOfRooms() {
          print("The number of rooms is \(numberOfRooms)")
      }
      var address: Address?
  }
  
  class Person {
      var residence: Residence?
  }
  
#+end_src

#+RESULTS:
: 6. 7. 8. 9. 10. 11. 12. 13. 14. 15. 16. 17. 18. 19> 20> 21. 22. 23. 24. 25. 26. 27. 28. 29. 30. 31. 32. 33. 34. 35. 36. 37. 38> 39> 40. 41. 42> 43> $R0: String = "ob-swift-eoe"

#+begin_src swift
let john = Person()
let someAddress = Address()
someAddress.buildingNumber = "29"
someAddress.street = "Acacia Road"
john.residence?.address = someAddress
if let roomCount = john.residence?.numberOfRooms {
    print("John's residence has \(roomCount) room(s).")
} else {
    print("Unable to retrieve the number of rooms.")
}
// Prints "Unable to retrieve the number of rooms."
#+end_src

#+RESULTS:
#+begin_example
john: Person = {
  residence = nil
}
someAddress: Address = {
  buildingName = nil
  buildingNumber = nil
  street = nil
}
$R1: ()? = nil
Unable to retrieve the number of rooms.
#+end_example

#+begin_src swift
  john.residence = nil 
  john.residence?.address = someAddress
if let roomCount = john.residence?.numberOfRooms {
    print("John's residence has \(roomCount) room(s).")
} else {
    print("Unable to retrieve the number of rooms.")
}
#+end_src

#+RESULTS:
: $R10: ()? = nil
: Unable to retrieve the number of rooms.

#+begin_src swift
func createAddress() -> Address {
    print("Function was called.")

    let someAddress = Address()
    someAddress.buildingNumber = "29"
    someAddress.street = "Acacia Road"

    return someAddress
}
john.residence?.address = createAddress()
#+end_src

#+RESULTS:
: $R12: ()? = nil
#+begin_src swift
  if john.residence?.printNumberOfRooms() != nil {
      print("It was possible to print the number of rooms.")
  } else {
      print("It was not possible to print the number of rooms.")
  }
#+end_src

#+RESULTS:

: It was not possible to print the number of rooms.
#+begin_src swift
if let firstRoomName = john.residence?[0].name {
    print("The first room name is \(firstRoomName).")
} else {
    print("Unable to retrieve the first room name.")
}
// Prints "Unable to retrieve the first room name."
#+end_src

#+RESULTS:
: Unable to retrieve the first room name.

#+begin_src swift
john.residence?[0] = Room(name: "Bathroom")
#+end_src

#+RESULTS:
: $R18: ()? = nil
#+begin_src swift
let johnsHouse = Residence()
johnsHouse.rooms.append(Room(name: "Living Room"))
johnsHouse.rooms.append(Room(name: "Kitchen"))
john.residence = johnsHouse

if let firstRoomName = john.residence?[0].name {
    print("The first room name is \(firstRoomName).")
} else {
    print("Unable to retrieve the first room name.")
}
// Prints "The first room name is Living Room."
#+end_src

#+RESULTS:
: johnsHouse: Residence = {
:   rooms = 0 values
:   address = nil
: }
: The first room name is Living Room.
